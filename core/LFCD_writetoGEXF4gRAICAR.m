function LFCD_writetoGEXF4gRAICAR(CIJ, fname, view, arcs, node_size, node_color, node_coord, node_label)
%   Xi-Nian Zuo, IPCAS, 2013.


CIJ(isnan(CIJ))=0; N = size(CIJ,1); % numer of nodes: 11 seeds of default network
if nargin < 7
    disp('Parameters: CIJ, fname, view, arcs, node_size, node_color, node_coord, node_label')
end

%% Write to the Gexf file
fid = fopen(cat(2,fname,'.gexf'), 'w');
% HEADER
hdl1 = '<?xml version="1.0" encoding="UTF-8"?>';
fprintf(fid, '%s \r', hdl1);
hdl2 = '<gexf xmlns="http://www.gexf.net/1.2draft"';
fprintf(fid, '%s \r', hdl2);
hdl2enhanced = 'xmlns:viz="http://www.gexf.net/1.2draft/viz"';%vis extension
fprintf(fid, '    %s \r', hdl2enhanced);
hdl3 = '      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
fprintf(fid, '%s \r', hdl3);
hdl4 = '     xsi:schemaLocation="http://www.gexf.net/1.2draft';
fprintf(fid, '%s \r', hdl4);
hdl5 = '                        http://www.gexf.net/1.1draft/gexf.xsd"';
fprintf(fid, '%s \r', hdl5);
hdl6 = '     version="1.2">';
fprintf(fid, '%s \r', hdl6);
hdl7 = ' <meta lastmodifieddate="20131126">';
fprintf(fid, '%s \r', hdl7);
hdl8 = '   <creator>Gephi.org</creator>';
fprintf(fid, '%s \r', hdl8);
hdl9 = '   <description>A Gephi file generated by Xi-Nian Zuo</description>';
fprintf(fid, '%s \r', hdl9);
hdl10 = '   <keywords>Gephi, Graph, Network</keywords>';
fprintf(fid, '%s \r', hdl10);
hdl11 = '  </meta>';
fprintf(fid, '%s \r', hdl11);
if arcs
	hdl12 = ' <graph defaultedgetype="directed">';
else
	hdl12 = ' <graph defaultedgetype="undirected">';
end
fprintf(fid, '%s \r', hdl12);
if strcmp(view, '3D')
    [dmn_sph_theta, dmn_sph_phi] = cart2sph(node_coord(:,1), node_coord(:,2), node_coord(:,3));
    hdl13 = ' <attributes class="node" mode="static">';
    fprintf(fid, '%s \r', hdl13);
    hdl14 = '  <attribute id="latitude" title="latitude" type="double"></attribute>';
    fprintf(fid, '%s \r', hdl14);
    hdl15 = '  <attribute id="longitude" title="longitude" type="double"></attribute>';
    fprintf(fid, '%s \r', hdl15);
    hdl16 = ' </attributes>';
    fprintf(fid, '%s \r', hdl16);
end
% NODES
fprintf(fid, '  <nodes> \r');
for ii = 1:N
	ndl = ['   <node id="' num2str(ii-1) '" label="' node_label{ii} '">'];
    fprintf(fid, '%s \r', ndl);
    ndlcolor = ['     <viz:color r="' num2str(node_color(ii,1)) '" g="' ...
        num2str(node_color(ii,2)) '" b="' num2str(node_color(ii,3)) '" a="0.5"/>'];
    fprintf(fid, '%s \r', ndlcolor);
    switch view
        case 'sph'
            ndlatt = '     <attvalues>';
            fprintf(fid, '%s \r', ndlatt);
            attval = ['      <attvalue for="latitude" value="' num2str(dmn_sph_theta(ii)*180/pi) '"/>'];
            fprintf(fid, '%s \r', attval);
            attval = ['      <attvalue for="longitude" value="' num2str(dmn_sph_phi(ii)*180/pi) '"/>'];
            fprintf(fid, '%s \r', attval);
            ndlatt = '     </attvalues>';
            fprintf(fid, '%s \r', ndlatt);
        case 'cart'
            ndlatt = '     <attvalues>';
            fprintf(fid, '%s \r', ndlatt);
            attval = ['      <attvalue for="x" value="' num2str(node_coord(ii,1)) '"/>'];
            fprintf(fid, '%s \r', attval);
            attval = ['      <attvalue for="y" value="' num2str(node_coord(ii,2)) '"/>'];
            fprintf(fid, '%s \r', attval);
            ndlatt = '     </attvalues>';
            fprintf(fid, '%s \r', ndlatt);
    end
    ndlsize = ['     <viz:size value="' num2str(node_size(ii)) '"/>'];
    fprintf(fid, '%s \r', ndlsize);
    fprintf(fid, '    </node> \r');
end
fprintf(fid, '   </nodes> \r');
%% EDGES
fprintf(fid, '  <edges> \r');
k=1;
for ii = 1:N
    for jj = 1:N
        if CIJ(ii,jj) ~= 0
			edl = ['   <edge id="' num2str(k-1) '" source="' num2str(ii-1) '" target="' ...
                num2str(jj-1) '" weight="' num2str(CIJ(ii,jj)) '" />'];
            fprintf(fid, '%s \r', edl);
			k = k + 1;
        end
    end
end
%% CLOSE
fprintf(fid, '  </edges> \r');
fprintf(fid, ' </graph> \r');
fprintf(fid, '</gexf> \r');
fclose(fid);
